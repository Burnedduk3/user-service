name: Go

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  MAYOR_VERSION: 1
  MINOR_VERSION: 0

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: setup go
        uses: actions/setup-go@v4
        with:
          go-version: '1.25'
      - name: Test
        run: go test -v ./...

  build:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.25'

      - name: Build
        run: go build -o user-service .
      - name: upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: go-application
          retention-days: 1
          path: user-service

  build-docker-image:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - uses: actions/checkout@v4
    - name: Download a single artifact
      uses: actions/download-artifact@v5
      with:
        name: go-application
    - name: Build docker image
      run: |
        docker build -f docker/Dockerfile -t user-service:$MAYOR_VERSION.$MINOR_VERSION.${{ github.run_number }} .
        docker save user-service:$MAYOR_VERSION.$MINOR_VERSION.${{ github.run_number }} -o user-service-image.tar
    - name: Upload Docker image artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        retention-days: 1
        path: user-service-image.tar

  push-to-ecr:
    runs-on: ubuntu-latest
    needs: [ build-docker-image ]
    steps:
      - name: Download Docker image artifact
        uses: actions/download-artifact@v5
        with:
          name: docker-image
      - name: Load Docker image
        run: docker load -i user-service-image.tar
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Tag and push image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: user-service  # Change to your ECR repository name
          IMAGE_TAG: ${{ env.MAYOR_VERSION }}.${{ env.MINOR_VERSION }}.${{ github.run_number }}
        run: |
          docker tag user-service:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag user-service:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

